class Controller{constructor(){this.view=new View,this.map=new Map(1),this.player=new Player(1),this.computer=new Computer(1),this.finishTurn=document.querySelector(".finishRound"),this.events=[],this.takenSpots=[],this.startGame()}displayAll(){this.view.displayMapFeatures(this.map),this.view.displayUnits(this.player.units),this.view.displayBuildings(this.player.buildings),this.view.displayUnits(this.computer.units),this.view.displayBuildings(this.computer.buildings)}startGame(){this.displayAll(),this.assignClickEvents(),this.finishTurn.addEventListener("click",()=>{this.endPlayerTurn()})}endPlayerTurn(){this.player.units.forEach(e=>{e.resetMovement()}),removeActionOverlay("movable"),removeActionOverlay("attackable"),this.computer.computerTurn()}assignClickEvents(){this.player.units.forEach(e=>{let t=convertCoordToHTMLElement(e.coord),r=()=>this.displayMovementPossibilities(e);this.events.push([t,r]),t.addEventListener("click",r)}),this.player.units.forEach(e=>{let t=convertCoordToHTMLElement(e.coord),r=()=>this.displayHoverInfo(e);this.events.push([t,r]),t.addEventListener("mouseover",r)}),this.computer.units.forEach(e=>{let t=convertCoordToHTMLElement(e.coord),r=()=>this.displayHoverInfo(e);this.events.push([t,r]),t.addEventListener("mouseover",r)})}displayHoverInfo(e){document.querySelector(".imgHover").innerHTML=`<img src = ${e.name}.png></img>`,document.querySelector(".ownerHover").innerHTML=`<b>owner: ${e.owner}</b>`,document.querySelector(".nameHover").innerHTML=`<b>name: ${e.name}</b>`,document.querySelector(".hpHover").innerHTML=`<b>health: ${e.health}</b>`,document.querySelector(".movementHover").innerHTML=`<b>movement: ${e.movement}</b>`,document.querySelector(".rangeHover").innerHTML=`<b>range: ${e.range}</b>`,document.querySelector(".damageHover").innerHTML=`<b>damage: ${e.damage}</b>`,document.querySelector(".buildHover").innerHTML="<b>build: <br>N.A. in hover</b>"}displaySelectInfo(e){document.querySelector(".imgSelect").innerHTML=`<img src = ${e.name}.png></img>`,document.querySelector(".ownerSelect").innerHTML=`<b>owner: ${e.owner}</b>`;let t=document.querySelector(".nameSelect").innerHTML=`<b>name: ${e.name}</b>`;document.querySelector(".hpSelect").innerHTML=`<b>health: ${e.health}</b>`,document.querySelector(".movementSelect").innerHTML=`<b>movement: ${e.movement}</b>`,document.querySelector(".rangeSelect").innerHTML=`<b>range: ${e.range}</b>`,document.querySelector(".damageSelect").innerHTML=`<b>damage: ${e.damage}</b>`,"<b>name: villager</b>"===t?(document.querySelector(".buildSelect").innerHTML='<b>build: <br> <button class ="yurtButton">Yurt</button> <button class="farmButton">Farm</button></b>',document.querySelector(".yurtButton").addEventListener("click",()=>e.calculatePossibleBuilds("yurt")),document.querySelector(".yurtButton").addEventListener("click",()=>e.calculatePossibleBuilds("farm"))):document.querySelector(".buildSelect").innerHTML="<b>build: <br>Can't Build</b>"}displayUnitMovement(e,t){this.view.eraseUnit(e,"player"),e.move(t),removeActionOverlay("movable"),removeActionOverlay("attackable"),this.view.drawUnit(e,"player"),this.refreshEvents()}displayMovementPossibilities(e){if(this.displaySelectInfo(e),0!==document.querySelectorAll(".movable").length||0!==document.querySelectorAll(".attackable").length){removeActionOverlay("movable"),removeActionOverlay("attackable");return}removeActionOverlay("movable"),removeActionOverlay("attackable"),this.refreshEvents();let t=e.calculatePossibleMoves(),r=e.calculatePossibleAttacks();t&&(t.forEach(t=>{let r=convertToHtml(t),s=()=>this.displayUnitMovement(e,t);this.events.push([r,s]),r.addEventListener("click",s)}),this.view.displayMovableSquares(t)),r&&(r.forEach(t=>{console.log(t);let r=convertToHtml(t),s=()=>e.attack(t);this.events.push([r,s]),r.addEventListener("click",s)}),this.view.displayAttackableSquares(r))}refreshEvents(){this.events.forEach(e=>{e[0].removeEventListener("click",e[1]),e[0].removeEventListener("mouseover",e[1])}),this.assignClickEvents()}calculateBuildableSpots(){let e=[];return this.map.features.forEach(t=>{"dark_dirt"===t[2]&&e.push(t)}),e}checkMovable(e){this.updateTakenSpots();let t=this.map.checkPassableTerrain(e),r=!this.takenSpotIncludes(e);return!!t&&!!r}takenSpotIncludes(e){let t=!1;return this.takenSpots.forEach(r=>{r.toString()===e.toString()&&(t=!0)}),t}updateTakenSpots(){return this.takenSpots=[],this.player.units.forEach(e=>{this.takenSpots.push(e.coord)}),this.computer.units.forEach(e=>{this.takenSpots.push(e.coord)}),this.player.buildings.forEach(e=>{this.takenSpots.push(e.coord)}),this.computer.buildings.forEach(e=>{this.takenSpots.push(e.coord)}),this.map.impassableFeatures.forEach(e=>{let t=Math.abs(e[1][0]-e[0][0]),r=Math.abs(e[1][1]-e[0][1]);for(let s=e[0][0];s<=e[0][0]+t;s++)for(let i=e[0][1];i<=e[0][1]+r;i++)this.takenSpots.push([s,i])}),this.takenSpots}}let controller=new Controller;